{"version":3,"sources":["Components/RevealComponents/revealOptions.js","Components/RevealComponents/Deck.js","Components/RevealComponents/Slide.js","Components/Highlight/JSX.js","Slides/StoringDataProblems.js","Components/Highlight/JSON.js","Slides/CraftingYourStore.js","Slides/AntiCorruptionLayer.js","Slides/CachingData.js","Slides/index.js","Slides/TitleSlide.js","Slides/CentralizedStore.js","App.js","serviceWorker.js","index.js"],"names":["revealOptions","controls","controlsTutorial","controlsLayout","controlsBackArrows","progress","slideNumber","hash","history","keyboard","overview","center","touch","loop","rtl","navigationMode","shuffle","fragments","fragmentInURL","embedded","help","showNotes","autoPlayMedia","preloadIframes","autoSlide","autoSlideStoppable","autoSlideMethod","Reveal","navigateNext","defaultTiming","mouseWheel","hideInactiveCursor","hideCursorTime","hideAddressBar","previewLinks","transition","transitionSpeed","backgroundTransition","viewDistance","parallaxBackgroundImage","parallaxBackgroundSize","parallaxBackgroundHorizontal","parallaxBackgroundVertical","display","Deck","_ref","options","children","useEffect","initialize","Object","objectSpread","react_default","a","createElement","className","Slide","JSX","code","es","assign","defaultProps","language","theme","undefined","_ref2","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","responsibleComponent","multipleCalls","JSON","jsonModel","reducer","thunk","layoutReducer","ACLLayout","ACLTheme","singleFetch","timedExpiration","Slides","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.679b48eb.chunk.js","sourcesContent":["import Reveal from 'reveal.js';\n\nexport default {\n\n    // Display presentation control arrows\n    controls: true,\n\n    // Help the user learn the controls by providing hints, for example by\n    // bouncing the down arrow when they first encounter a vertical slide\n    controlsTutorial: true,\n\n    // Determines where controls appear, \"edges\" or \"bottom-right\"\n    controlsLayout: 'bottom-right',\n\n    // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n    // or \"visible\"\n    controlsBackArrows: 'faded',\n\n    // Display a presentation progress bar\n    progress: true,\n\n    // Display the page number of the current slide\n    slideNumber: false,\n\n    // Add the current slide number to the URL hash so that reloading the\n    // page/copying the URL will return you to the same slide\n    hash: false,\n\n    // Push each slide change to the browser history. Implies `hash: true`\n    history: false,\n\n    // Enable keyboard shortcuts for navigation\n    keyboard: true,\n\n    // Enable the slide overview mode\n    overview: true,\n\n    // Vertical centering of slides\n    center: true,\n\n    // Enables touch navigation on devices with touch input\n    touch: true,\n\n    // Loop the presentation\n    loop: false,\n\n    // Change the presentation direction to be RTL\n    rtl: false,\n\n    // See https://github.com/hakimel/reveal.js/#navigation-mode\n    navigationMode: 'default',\n\n    // Randomizes the order of slides each time the presentation loads\n    shuffle: false,\n\n    // Turns fragments on and off globally\n    fragments: true,\n\n    // Flags whether to include the current fragment in the URL,\n    // so that reloading brings you to the same fragment position\n    fragmentInURL: false,\n\n    // Flags if the presentation is running in an embedded mode,\n    // i.e. contained within a limited portion of the screen\n    embedded: false,\n\n    // Flags if we should show a help overlay when the questionmark\n    // key is pressed\n    help: true,\n\n    // Flags if speaker notes should be visible to all viewers\n    showNotes: false,\n\n    // Global override for autoplaying embedded media (video/audio/iframe)\n    // - null: Media will only autoplay if data-autoplay is present\n    // - true: All media will autoplay, regardless of individual setting\n    // - false: No media will autoplay, regardless of individual setting\n    autoPlayMedia: null,\n\n    // Global override for preloading lazy-loaded iframes\n    // - null: Iframes with data-src AND data-preload will be loaded when within\n    //   the viewDistance, iframes with only data-src will be loaded when visible\n    // - true: All iframes with data-src will be loaded when within the viewDistance\n    // - false: All iframes with data-src will be loaded only when visible\n    preloadIframes: null,\n\n    // Number of milliseconds between automatically proceeding to the\n    // next slide, disabled when set to 0, this value can be overwritten\n    // by using a data-autoslide attribute on your slides\n    autoSlide: 0,\n\n    // Stop auto-sliding after user input\n    autoSlideStoppable: true,\n\n    // Use this method for navigation when auto-sliding\n    autoSlideMethod: Reveal.navigateNext,\n\n    // Specify the average time in seconds that you think you will spend\n    // presenting each slide. This is used to show a pacing timer in the\n    // speaker view\n    defaultTiming: 120,\n\n    // Enable slide navigation via mouse wheel\n    mouseWheel: false,\n\n    // Hide cursor if inactive\n    hideInactiveCursor: true,\n\n    // Time before the cursor is hidden (in ms)\n    hideCursorTime: 5000,\n\n    // Hides the address bar on mobile devices\n    hideAddressBar: true,\n\n    // Opens links in an iframe preview overlay\n    // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n    // individually\n    previewLinks: false,\n\n    // Transition style\n    transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n    // Transition speed\n    transitionSpeed: 'default', // default/fast/slow\n\n    // Transition style for full page slide backgrounds\n    backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom\n\n    // Number of slides away from the current that are visible\n    viewDistance: 3,\n\n    // Parallax background image\n    parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\n\n    // Parallax background size\n    parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\"\n\n    // Number of pixels to move the parallax background per slide\n    // - Calculated automatically unless specified\n    // - Set to 0 to disable movement along an axis\n    parallaxBackgroundHorizontal: null,\n    parallaxBackgroundVertical: null,\n\n    // The display mode that will be used to show slides\n    display: 'block'\n\n};\n","import React, { useEffect } from 'react';\nimport Reveal from 'reveal.js';\nimport 'reveal.js/css/reveal.css';\nimport revealOptions from './revealOptions';\n\nexport default function Deck({ options, children }) {\n    useEffect(() => {\n        Reveal.initialize({ ...revealOptions, ...options });\n    });\n    return (\n        <div className=\"reveal\">\n            <div className=\"slides\">\n                {children}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function Slide({ children }) {\n    return (\n        <section>{children}</section>\n    )\n}\n","import React from 'react';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nexport default function JSX({ code }) {\n    return (\n        <Highlight {...defaultProps} language=\"jsx\" code={code} theme={undefined}>\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                    {tokens.map((line, i) => (\n                        <div {...getLineProps({ line, key: i })}>\n                            {line.map((token, key) => (\n                                <span {...getTokenProps({ token, key })} />\n                            ))}\n                        </div>\n                    ))}\n                </pre>\n            )}\n        </Highlight>\n    )\n}\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\nimport JSX from '../Components/Highlight/JSX';\n\nconst responsibleComponent = `const ResponsibleComponent = () => {\n    const [data, setData] = useState({});\n    useEffect(() =>\n        fetchData()\n            .then(setData)\n    );\n    \n    return (\n        <ChildComponentWithData data={data} />\n    );\n}`;\n\nconst multipleCalls = `const MultipleRenderOfSameComponent = () => (\n    <Wrapper>\n        <ResponsibleComponent />\n        <ResponsibleComponent />\n        <ResponsibleComponent />\n    </Wrapper>\n)`;\n\nexport default function StoringDataProblems() {\n    return (\n        <Slide>\n            <Slide>\n                <h3>Storing data in modern front-end applications</h3>\n            </Slide>\n            <Slide>\n                <div>\n                    <h4>Component Oriented Conception</h4>\n                    <p>Each component is responsible for its data</p>\n                    <JSX code={responsibleComponent} />\n                </div>\n            </Slide>\n            <Slide>\n                <div>\n                    <h4>Problem</h4>\n                    <p>We need to centralize the data store to avoid requests duplication while keeping it usable</p>\n                    <JSX code={multipleCalls} />\n                </div>\n            </Slide>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nexport default function JSON({ code }) {\n    return (\n        <Highlight {...defaultProps} language=\"json\" code={code} theme={undefined}>\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                <pre className={className} style={style}>\n                    {tokens.map((line, i) => (\n                        <div {...getLineProps({ line, key: i })}>\n                            {line.map((token, key) => (\n                                <span {...getTokenProps({ token, key })} />\n                            ))}\n                        </div>\n                    ))}\n                </pre>\n            )}\n        </Highlight>\n    )\n}\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\nimport JSON from '../Components/Highlight/JSON';\nimport JSX from '../Components/Highlight/JSX';\n\nconst jsonModel = `{\n    \"id\": \"string\",\n    \"themes\": [\n        {\n            \"id\": \"string\",\n            \"title\": \"string\",\n            \"newsletters\": [\n                {\n                    \"id\": \"string\",\n                    \"title\": \"string\",\n                    \"description\": \"string\"\n                }\n            ]\n        }\n    ]\n}`;\n\nconst reducer = `const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case 'newsletters.save':\n            return { ...state, newsletters: action.newsletters };\n            \n        default:\n            return state;\n    }\n}`;\n\nconst thunk = `const fetchNewsletters = () => async dispatch => {\n    const newsletters = await getNewsletters();\n    \n    dispatch({ type: 'newsletters.save', newsletters });\n}`;\n\nexport default function CraftingYourStore() {\n    return (\n        <Slide>\n            <Slide>\n                <h3>Crafting your store</h3>\n            </Slide>\n            <Slide>\n                <h4>Context</h4>\n                <p>\n                    You may encounter badly crafted api that makes your data messy\n                </p>\n            </Slide>\n            <Slide>\n                <h4>Example data model from the API</h4>\n                <JSON code={jsonModel}/>\n            </Slide>\n            <Slide>\n                <h4>Example with Redux (reducer)</h4>\n                <JSX code={reducer}/>\n            </Slide>\n            <Slide>\n                <h4>Example with Redux (thunk)</h4>\n                <JSX code={thunk}/>\n            </Slide>\n            <Slide>\n                <h4>Major Drawbacks</h4>\n                <ul>\n                    <li>Our data is strongly coupled with the server data</li>\n                    <li>Our data are not easy to use as they are nested</li>\n                </ul>\n            </Slide>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\nimport JSON from '../Components/Highlight/JSON';\nimport JSX from '../Components/Highlight/JSX';\n\nconst jsonModel = `{\n    \"id\": \"string\",\n    \"themes\": [\n        {\n            \"id\": \"string\",\n            \"title\": \"string\",\n            \"newsletters\": [\n                {\n                    \"id\": \"string\",\n                    \"title\": \"string\",\n                    \"description\": \"string\"\n                }\n            ]\n        }\n    ]\n}`;\n\nconst layoutReducer = `const layoutReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case 'layout.save':\n            return { ...state, layout: action.layout };\n            \n        default:\n            return state;\n    }\n}`;\n\nconst ACLLayout = `export const fetchLayout = async () => {\n    const newsletters = exernalAPI.fetchNewsletters();\n    const layout = {\n        id: newsletters.id,\n        themes: newsletters.themes.map(theme => theme.id)\n    };\n    \n    dispatch({ type: 'layout.save', layout });\n};`;\n\nconst ACLTheme= `export const fetchLayout = async () => {\n    const newsletters = exernalAPI.fetchNewsletters();\n    const themes = newsletters.themes.reduce((acc, theme) => ({\n        ...acc,\n        [theme.id]: {\n            id: theme.id,\n            newsletters: theme.newsletters.map(nl => nl.id)\n        },\n    });\n    \n    dispatch({ type: 'layout.save', layout });\n};`;\n\nexport default function AntiCorruptionLayer() {\n    return (\n        <Slide>\n            <Slide>\n                <h3>Anti Corruption Layer (ACL)</h3>\n            </Slide>\n            <Slide>\n                <h4>Role</h4>\n                <p>\n                    The ACL translates the external dataModel into your own data model.\n                </p>\n            </Slide>\n            <Slide>\n                <h4>Isolating concepts</h4>\n                <JSON code={jsonModel}/>\n            </Slide>\n            <Slide>\n                <h4>Isolating concepts</h4>\n                <JSON code={jsonModel}/>\n                <p>\n                    Layout | Theme | Newsletter\n                </p>\n            </Slide>\n            <Slide>\n                <h4>Creating a reducer for each concept</h4>\n                <JSX code={layoutReducer}/>\n            </Slide>\n            <Slide>\n                <h4>Creating the ACL (layout)</h4>\n                <JSX code={ACLLayout}/>\n            </Slide>\n            <Slide>\n                <h4>Creating the ACL (theme)</h4>\n                <JSX code={ACLTheme}/>\n            </Slide>\n            <Slide>\n                <p>But we are doing multiple queries for the same data ...</p>\n            </Slide>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\nimport JSX from '../Components/Highlight/JSX';\n\nconst singleFetch = `const singleFetch = (callback) => {\n    const cached = {};\n    return (arg) => {\n        if (cached[arg]) {\n            return cached[arg];\n        }\n        cached[arg] = callback(arg);\n        return cached[arg];\n    }\n}`;\n\nconst timedExpiration = `const singleFetch = (callback, expiration = 5000) => {\n    const cached = {};\n    return (arg) => {\n        if (cached[arg] && cached[arg].timestamp > Date.now() - expiration) {\n            return cached[arg].response;\n        }\n        cached[arg] = {\n            response: callback(arg),\n            timestamp: Date.now()\n        }\n        return cached[arg].response;\n    }\n}`;\n\nexport default function CachingData() {\n    return (\n        <Slide>\n            <Slide>\n                <h3>Caching API data</h3>\n            </Slide>\n            <Slide>\n                <h4>Caching policies</h4>\n                <ul>\n                    <li>Single fetch (memoization)</li>\n                    <li>Timed expiration</li>\n                </ul>\n            </Slide>\n            <Slide>\n                <h4>Single fetch (memoization)</h4>\n                <JSX code={singleFetch} />\n            </Slide>\n\n            <Slide>\n                <h4>Timed expiration</h4>\n                <JSX code={timedExpiration} />\n            </Slide>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport TitleSlide from './TitleSlide';\nimport StoringDataProblems from './StoringDataProblems';\nimport CentralizedStore from './CentralizedStore';\nimport CraftingYourStore from './CraftingYourStore';\nimport AntiCorruptionLayer from './AntiCorruptionLayer';\nimport CachingData from './CachingData';\n\nexport default [\n    <TitleSlide key=\"title\"/>,\n    <StoringDataProblems key=\"first\"/>,\n    <CentralizedStore key=\"centralized\"/>,\n    <CraftingYourStore key=\"crafting\"/>,\n    <AntiCorruptionLayer key=\"ACL\"/>,\n    <CachingData key=\"caching\"/>\n];\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\n\nexport default function TitleSlide() {\n    return (\n        <Slide>\n            <h2>Structuring data access in front-end application</h2>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport Slide from '../Components/RevealComponents/Slide';\n\nexport default function CentralizedStore() {\n    return (\n        <Slide>\n            <Slide>\n                <h3>Using a centralized store</h3>\n            </Slide>\n            <Slide>\n                <h4>Advantages</h4>\n                <ul>\n                    <li>Using a centralized store helps you manage request concurrency</li>\n                    <li>Using a centralized store makes your resources available everywhere in your app</li>\n                </ul>\n            </Slide>\n            <Slide>\n                <h4>Drawbacks</h4>\n                <ul>\n                    <li>A poorly managed store may become a pain to manage</li>\n                    <li>It main become hard to scale through your app if not crafted carefully</li>\n                </ul>\n            </Slide>\n        </Slide>\n    )\n}\n","import React from 'react';\nimport './App.scss';\n\nimport './Themes/darcula.css';\n\nimport Deck from './Components/RevealComponents/Deck';\nimport Slides from './Slides';\n\n// Setup the slide theme\nimport 'reveal.js/css/theme/solarized.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck>\n          {Slides}\n      </Deck>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}